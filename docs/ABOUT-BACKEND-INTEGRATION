# Backend Integration Guide

This document provides a reference for the current API endpoints and a guide for integrating a production backend.

## 1. Backend Integration
The existing backend uses Next.js API routes with an in-memory data store for development. To integrate a production database (e.g., Supabase), replace the mock data operations with corresponding database queries.

**Steps for Supabase Integration:**
1. **Configure**: Set up `stats`, `team_members`, and `technologies` tables in your Supabase project.
2. **Credentials**: Add your Supabase URL and API key to your `.env.local` file.
3. **SDK**: Install `@supabase/supabase-js`.
4. **Client**: Create a Supabase client instance, for example, in `lib/supabase.ts`.
5. **Refactor**: Update each API route file (`app/api/.../route.ts`) to use the Supabase client to perform CRUD operations instead of manipulating the `aboutUsData` object.

---

## 2. API Endpoint Reference
This section outlines the available API endpoints for the About page, with examples for testing.  
All examples use `http://localhost:3000` as the base URL.

### GET /api/about
- **Method:** GET  
- **Description:** Fetches all data for the About page in a single request.

**Response Body:**
```json
{
  "stats": {
    "activeMembers": 100,
    "projectsCount": 50,
    "yearsOfExcellence": 13
  },
  "team": [
    /* ... array of TeamMember objects ... */
  ],
  "technologies": [
    /* ... array of Technology objects ... */
  ]
}
```

### PATCH /api/about/stats
- **Method:** PATCH  
- **Description:** Updates one or more fields of the stats resource.

**Request Body:**
```json
{
  "activeMembers": 120,
  "projectsCount": 65
}
```

---

## Team Members API

### POST /api/about/team
- **Method:** POST  
- **Description:** Creates a new team member.

**Request Body:**
```json
{
  "name": "Jane Doe",
  "title": "Vice President",
  "image": "/assets/team/jane-doe.png",
  "socials": {
    "linkedin": "https://linkedin.com/in/janedoe"
  }
}
```

### PUT /api/about/team/[id]
- **Method:** PUT  
- **Description:** Replaces an existing team member resource.  
- **URL Example:** `http://localhost:3000/api/about/team/3`

**Request Body:**
```json
{
  "id": 3,
  "name": "Jane Doe",
  "title": "Former Vice President",
  "image": "/assets/team/jane-doe.png",
  "socials": {
    "linkedin": "https://linkedin.com/in/janedoe",
    "github": "https://github.com/janedoe-dev"
  }
}
```

### DELETE /api/about/team/[id]
- **Method:** DELETE  
- **Description:** Deletes a team member.  
- **URL Example:** `http://localhost:3000/api/about/team/4`  
- **Request Body:** Not required.

---

## Technologies API

### POST /api/about/technologies
- **Method:** POST  
- **Description:** Creates a new technology entry.

**Request Body:**
```json
{
  "name": "New Tech",
  "icon": "/assets/icons/new-tech.svg",
  "alt": "New Tech Logo"
}
```

### PUT /api/about/technologies/[id]
- **Method:** PUT  
- **Description:** Replaces an existing technology resource.  
- **URL Example:** `http://localhost:3000/api/about/technologies/1`

**Request Body:**
```json
{
  "id": 1,
  "name": "Updated React JS",
  "icon": "path/to/new-react-icon.png",
  "alt": "New React JS logo"
}
```

### DELETE /api/about/technologies/[id]
- **Method:** DELETE  
- **Description:** Deletes a technology.  
- **URL Example:** `http://localhost:3000/api/about/technologies/2`  
- **Request Body:** Not required.


all tested with postman, they working well. gl 

ദ്ദി ˉ͈̀꒳ˉ͈́ )✧